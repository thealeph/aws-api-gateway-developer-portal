---
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Description: My Dev Portal Stack
Parameters:
  ArtifactsS3BucketName:
    Type: String
    Description: The S3 bucket in which the Lambda function code is stored. Bucket
      names are globally unique, so you must change this.

  DevPortalSiteS3BucketName:
    Type: String
    Description: The S3 bucket in which the web application code is stored. Bucket
      names are globally unique, so you must change this.

  DevPortalCustomersTableName:
    Type: String
    Description: The name of the DynamoDB Customers table.
    Default: "DevPortalCustomers"

  StaticAssetRebuildToken:
    Type: String
    Description: Provide a token different from the last deployment's token to re-upload the dev portal site's static assets. You can provide a timestamp or GUID on each deployment to always re-upload the assets.
    Default: defaultRebuildToken

  StaticAssetRebuildMode:
    Type: String
    Description: By default, a static asset rebuild doesn't overwrite custom-content. Provide the value `overwrite_content` to replace the custom-content with your local version. Don't do this unless you know what you're doing -- all custom changes in your s3 bucket will be lost. 
    Default: ''

  MarketplaceSubscriptionTopicProductCode:
    Type: String
    Description: The marketplace SNS topic suffix for subscription/unsubscription events
    Default: "DevPortalMarketplaceSubscriptionTopic"

  CognitoIdentityPoolName:
    Type: String
    Description: The name for your Cognito Identity Pool.
    Default: "DevPortalUserPool"

  AWSRegion:
    Type: String
    Description: The region to deploy to.
    Default: "us-east-1"

  CustomDomainName:
    Type: String
    Description: Optionally provide a custom domain name associated with an ACM cert to create a developer portal at that domain name (provide with the format foo.bar.net). Leave blank to create a developer portal without a custom domain name. Standing up a developer portal stack with a custom domain name will take significantly longer than without.
    Default: ''

  CustomDomainNameAcmCertArn:
    Type: String
    Description: If you provided a domain name associated with an acm cert, then you must also specify here the acm cert's arn. Leave this blank to create a developer portal without a custom domain name.
    Default: ''

  UseRoute53Nameservers:
    Type: String
    Description: Only applicable if creating a custom domain name for your dev portal. If true, skips creating a Route53 HostedZone and RecordSet. You'll need to provide your own nameserver hosting in place of Route53.
    Default: 'false'

Conditions:
  UseCustomDomainName: !And [!Not [!Equals [!Ref CustomDomainName, '']], !Not [!Equals [!Ref CustomDomainNameAcmCertArn, '']]]
  # the second clause is a copy of the UseCustomDomainName condition
  # re-using it doesn't seem possible?
  UseRoute53: !And [!Equals [!Ref UseRoute53Nameservers, 'true'], !And [!Not [!Equals [!Ref CustomDomainName, '']], !Not [!Equals [!Ref CustomDomainNameAcmCertArn, '']]]]

Resources:
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      DefinitionBody:
        swagger: 2.0
        info:
          title: !Join ['', [!Ref 'AWS::StackName', '-backend-api']]
          version: 2016-09-02T22:37:24Z
        basePath: /prod
        schemes:
        - https
        paths:
          /:
            x-amazon-apigateway-any-method:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: "#/definitions/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                uri: !Join
                  - ''
                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function
                    - :${stageVariables.DevPortalFunctionName}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: mock
          /register:
            post:
              produces:
              - application/json
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Join
                  - ''
                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function
                    - :${stageVariables.DevPortalFunctionName}/invocations
                httpMethod: POST
                type: aws_proxy
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: mock
          /marketplace-confirm/{usagePlanId}:
            post:
              produces:
              - application/json
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Join
                  - ''
                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function
                    - :${stageVariables.DevPortalFunctionName}/invocations
                httpMethod: POST
                type: aws_proxy
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: mock
          /catalog:
            get:
              produces:
              - application/json
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Join
                  - ''
                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function
                    - :${stageVariables.DevPortalFunctionName}/invocations
                httpMethod: POST
                type: aws_proxy
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: mock
          /{proxy+}:
            x-amazon-apigateway-any-method:
              x-amazon-apigateway-auth:
                type: aws_iam
              produces:
              - application/json
              parameters:
              - name: proxy
                in: path
                required: true
                type: string
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Join
                  - ''
                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function
                    - :${stageVariables.DevPortalFunctionName}/invocations
                httpMethod: POST
                type: aws_proxy
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: mock
        definitions:
          Empty:
            type: object
            title: Empty Schema

      StageName: prod
      Variables:
        DevPortalFunctionName: !Ref DevPortalLambdaFunction

  DevPortalSiteS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref DevPortalSiteS3BucketName
      # AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
        RoutingRules:
          - RoutingRuleCondition:
              HttpErrorCodeReturnedEquals: 403
            RedirectRule:
              HostName: !If [ UseCustomDomainName, !Ref CustomDomainName, !Join ['', [!Ref DevPortalSiteS3BucketName, '.s3-website-', !Ref 'AWS::Region', '.amazonaws.com']]]
              ReplaceKeyPrefixWith: '#!/'

  ArtifactsS3Bucket:
    Type: AWS::S3::Bucket
    DependsOn: CatalogUpdaterLambdaFunction
    Properties:
      BucketName: !Ref ArtifactsS3BucketName
      NotificationConfiguration:
        LambdaConfigurations:
          -
            Function: !GetAtt CatalogUpdaterLambdaFunction.Arn
            Event: "s3:ObjectCreated:*"
            Filter:
              S3Key:
                Rules:
                  -
                    Name: prefix
                    Value: "catalog/"
          -
            Function: !GetAtt CatalogUpdaterLambdaFunction.Arn
            Event: "s3:ObjectRemoved:*"
            Filter:
              S3Key:
                Rules:
                  -
                    Name: prefix
                    Value: "catalog/"

  CustomersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DevPortalCustomersTableName
      AttributeDefinitions:
      - AttributeName: Id
        AttributeType: S
      - AttributeName: MarketplaceCustomerId
        AttributeType: S
      KeySchema:
      - AttributeName: Id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
      GlobalSecondaryIndexes:
      - IndexName: MarketplaceCustomerIdIndex
        KeySchema:
        - AttributeName: MarketplaceCustomerId
          KeyType: HASH
        Projection:
          NonKeyAttributes:
          - ApiKeyId
          ProjectionType: INCLUDE
        ProvisionedThroughput:
          ReadCapacityUnits: '5'
          WriteCapacityUnits: '5'

  BackendLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - apigateway:*
            Resource: '*'
          - Effect: Allow
            Action:
            - s3:GetObject
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref ArtifactsS3BucketName
                - '/*'
          - Effect: Allow
            Action:
            - aws-marketplace:ResolveCustomer
            Resource: '*'
          - Effect: Allow
            Action:
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            Resource: !Join
              - ''
              - - 'arn:aws:dynamodb:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - :table/
                - !Ref CustomersTable
          - Effect: Allow
            Action:
            - dynamodb:Query
            Resource: !Join
              - ''
              - - 'arn:aws:dynamodb:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - :table/
                - !Ref CustomersTable
                - /index/MarketplaceCustomerIdIndex

  CognitoStrategyLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*

  CatalogUpdaterLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - s3:ListBucket
            Resource: 
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref ArtifactsS3BucketName
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref DevPortalSiteS3BucketName
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:PutObject
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref ArtifactsS3BucketName
                - '/*'
          - Effect: Allow
            Action:
#            scope this down
            - apigateway:*
            Resource: '*'

  AssetUploaderLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - s3:PutObject
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref DevPortalSiteS3BucketName
                - '/*'
          - Effect: Allow
            Action:
            - s3:PutObjectAcl
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref DevPortalSiteS3BucketName
                - '/*'
          - Effect: Allow
            Action:
            - s3:ListBucket
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref DevPortalSiteS3BucketName
          - Effect: Allow
            Action:
            - s3:DeleteObject
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref DevPortalSiteS3BucketName
                - '/*'
          - Effect: Allow
            Action:
            - s3:DeleteObject
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref ArtifactsS3BucketName
                - '/*'
          - Effect: Allow
            Action:
            - s3:ListBucket
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref ArtifactsS3BucketName
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:PutObject
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref ArtifactsS3BucketName
                - '/*'

  ApiGatewayMarketplaceMeteringRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - ''
        - - !Ref AWS::StackName
          - 'MeteringRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: ApiGatewayMeteringPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - aws-marketplace:BatchMeterUsage
            - aws-marketplace:ResolveCustomer
            Effect: Allow
            Resource: '*'

  LambdaApiGatewayExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DevPortalLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref ApiGatewayApi
          - '/*/*'

  LambdaCognitoUserPoolExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CognitoUserPoolsConfirmationStrategyFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:cognito-idp:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':userpool/'
          - !Ref CognitoUserPool

  LambdaSNSExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SubscriptionListenerLambdaFunction.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:sns:us-east-1:287250355862:aws-mp-subscription-notification-'
          - !Ref MarketplaceSubscriptionTopicProductCode

  LambdaSNSExecutionTestPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SubscriptionListenerLambdaFunction.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:sns:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':marketplace-test-topic'

  DevPortalLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/backend
      Handler: index.handler
      MemorySize: 1024
      Role: !GetAtt BackendLambdaExecutionRole.Arn
      Runtime: nodejs8.10
      Timeout: 30
      Environment:
        Variables:
          WEBSITE_BUCKET_NAME: !Ref DevPortalSiteS3BucketName
          StaticBucketName: !Ref ArtifactsS3BucketName
          CustomersTableName: !Ref DevPortalCustomersTableName

      # Adds the API as a trigger
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /
            Method: ANY
        ProxyApiGreedy:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /{proxy+}
            Method: ANY

  SubscriptionListenerLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/listener
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt BackendLambdaExecutionRole.Arn
      Runtime: nodejs8.10
      Timeout: 30

  CognitoUserPoolsConfirmationStrategyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/cognito-user-pools-confirmation-strategy
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt CognitoStrategyLambdaExecutionRole.Arn
      Runtime: nodejs8.10
      Timeout: 3

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref CognitoIdentityPoolName
      LambdaConfig:
        PreSignUp: !GetAtt CognitoUserPoolsConfirmationStrategyFunction.Arn
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: CognitoIdentityPool
      GenerateSecret: false
      RefreshTokenValidity: 30

  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Ref CognitoIdentityPoolName
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref CognitoUserPoolClient
          ProviderName: !Join
            - ''
            - - cognito-idp.
              - !Ref 'AWS::Region'
              - .amazonaws.com/
              - !Ref CognitoUserPool

  CognitoIdentityPoolRoles:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthenticatedRole.Arn

  CognitoAuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
          Action: sts:AssumeRoleWithWebIdentity
          Condition:
            StringEquals:
              'cognito-identity.amazonaws.com:aud': !Ref CognitoIdentityPool
            'ForAnyValue:StringLike':
              'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
      - PolicyName: CognitoAuthenticatedRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - execute-api:Invoke
            Resource: !Join
              - ''
              - - 'arn:aws:execute-api:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':'
                - !Ref ApiGatewayApi
                - /prod/*/*
      Path: '/'

  CatalogUpdaterLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/catalog-updater
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt CatalogUpdaterLambdaExecutionRole.Arn
      Runtime: nodejs8.10
      Timeout: 20
      Environment:
        Variables:
          BucketName: !Ref ArtifactsS3BucketName

  CatalogUpdaterLambdaPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt CatalogUpdaterLambdaFunction.Arn
      Principal: "s3.amazonaws.com"
      SourceAccount: !Ref AWS::AccountId
      #SourceArn: !GetAtt MyBucket.Arn

  StaticAssetUploaderLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/static-asset-uploader
      Handler: index.handler
      MemorySize: 512
      Role: !GetAtt AssetUploaderLambdaExecutionRole.Arn
      Runtime: nodejs8.10
      Timeout: 300
      Environment:
        Variables:
          StaticBucketName: !Ref ArtifactsS3BucketName

  StaticAssetUploader:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: ArtifactsS3Bucket
    Properties:
      ServiceToken: !GetAtt StaticAssetUploaderLambdaFunction.Arn
      BucketName: !Ref DevPortalSiteS3Bucket
      RestApiId: !Ref ApiGatewayApi
      Region: !Ref 'AWS::Region'
      IdentityPoolId: !Ref CognitoIdentityPool
      UserPoolId: !Ref CognitoUserPool
      UserPoolClientId: !Ref CognitoUserPoolClient
      MarketplaceSuffix: !Ref MarketplaceSubscriptionTopicProductCode
      RebuildToken: !Ref StaticAssetRebuildToken
      RebuildMode: !Ref StaticAssetRebuildMode

  CustomDomainCloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn: DevPortalSiteS3Bucket
    Condition: UseCustomDomainName
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref CustomDomainName
          - !Join [ '', [ 'www.', !Ref CustomDomainName ] ]
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: true
          TargetOriginId: 'dev-portal-site-s3-bucket'
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: true
        Origins:
          - DomainName: !Join ['', [!Ref DevPortalSiteS3BucketName, '.s3-website-', !Ref 'AWS::Region', '.amazonaws.com']]
            Id: 'dev-portal-site-s3-bucket'
            CustomOriginConfig:
              OriginProtocolPolicy: 'http-only'
        ViewerCertificate:
          AcmCertificateArn: !Ref CustomDomainNameAcmCertArn
          SslSupportMethod: 'sni-only'

  CustomDomainDistributionAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Condition: UseCustomDomainName
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'CloudFront OAI for ${CustomDomainName}'

  CustomDomainHostedZone:
    Type: AWS::Route53::HostedZone
    Condition: UseRoute53
    Properties:
      Name: !Join [ '', [ !Ref CustomDomainName, '.' ] ]

  CustomDomainRecordSet:
    Type: AWS::Route53::RecordSetGroup
    Condition: UseRoute53
    Properties:
      HostedZoneName: !Join [ '', [ !Ref CustomDomainName, '.' ] ]
      RecordSets:
        - Name: !Join [ '', [ !Ref CustomDomainName, '.' ] ]
          Type: A
          AliasTarget:
            DNSName: !Join [ '', [ !GetAtt CustomDomainCloudfrontDistribution.DomainName, '.' ] ]
            # this is a "magic string" for using CFN aliases; see this link:
            # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html
            HostedZoneId: 'Z2FDTNDATAQYW2'
        - Name: !Join [ '', [ 'www.', !Ref CustomDomainName, '.' ] ]
          Type: A
          AliasTarget:
            DNSName: !Join [ '', [ !GetAtt CustomDomainCloudfrontDistribution.DomainName, '.' ] ]
            HostedZoneId: 'Z2FDTNDATAQYW2'

Outputs:
  WebsiteURL:
    Value: !Join
      - ''
      - - http://
        - !Ref DevPortalSiteS3BucketName
        - .s3-website-
        - !Ref 'AWS::Region'
        - .amazonaws.com
    Description: URL for website hosted on S3